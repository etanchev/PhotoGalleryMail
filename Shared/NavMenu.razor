@inject GlobalComponentValues Value
@implements IDisposable
@inject ApiCalls ApiCalls
@inject HttpClient httpclient
@inject AuthenticationStateProvider AuthenticationStateProvider



<div class="top-row pl-4 navbar my-yellow-color">
    <a class="navbar-brand" href=""><h5 class="my-yellow-color">PhotoGallery Mail</h5></a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon" style="background-image: url('crab.png');"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="compose">
                <span class="oi oi-plus my-yellow-color" aria-hidden="true"></span> New Mail
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="inbox">
                <span class="oi oi-list-rich my-yellow-color pr-1" aria-hidden="true"></span>
                <span class="pr-1">InBox</span>
                @if (Value.MailsCount == null) { }
                else
                {
                    <span class=" my-yellow-color" aria-hidden="true">[</span>
                    @Value.MailsCount
                    <span class="my-yellow-color" aria-hidden="true">]</span>
                }

            </NavLink>

        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="sent">
                <span class="oi oi-list-rich my-yellow-color" aria-hidden="true"></span> Sent
            </NavLink>
        </li>
    </ul>



</div>


@code {




    public void Dispose()
    {
        Value.OnChangeMailsCounter -= StateHasChanged;
    }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        StateHasChanged();
        collapseNavMenu = !collapseNavMenu;
    }
}
